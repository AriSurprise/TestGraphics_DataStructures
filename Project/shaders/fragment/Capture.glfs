#version 430 core

// vertex position input / attribute
in vec4 vP;
// vertex <u,v, set value>; texture space [0,1] ratio input / attribute
in vec3 vT0;
// vec3 is enough to assign a UV index to a set, even if multiple UVs can't be
// assigned per vertex this way; it's at least more succinct than a bunch of 0's
// or variable width uv allotments would take, while allowing for cube mapping

 uniform float kernel[] = { 0, 0, 0,
                            0, 1, 0,
                            0, 0, 0};

// Sampler to interpolate UV coords out of the default texture channel (0)
uniform sampler2D sTex0;
uniform float offset = 1.0 / 500.0;

out vec4 FragColor;

void main()
{
  vec2 offsets[9] = vec2[](
        vec2(-offset,  offset), // top-left
        vec2( 0.0f,    offset), // top-center
        vec2( offset,  offset), // top-right
        vec2(-offset,  0.0f),   // center-left
        vec2( 0.0f,    0.0f),   // center-center
        vec2( offset,  0.0f),   // center-right
        vec2(-offset, -offset), // bottom-left
        vec2( 0.0f,   -offset), // bottom-center
        vec2( offset, -offset)  // bottom-right    
    );
    
    vec3 sampleTex[9];
    for(int i = 0; i < 9; i++)
    {
      sampleTex[i] = vec3(texture(sTex0, vT0.st + offsets[i]));
    }
    vec3 col = vec3(0.0);
    for(int i = 0; i < 9; i++)
    {
      col += sampleTex[i] * kernel[i];
    }

    
    FragColor = vec4(col, 1.0);
}
